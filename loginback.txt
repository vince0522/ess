from flask import Flask, redirect, url_for, session, render_template
from flask_oauthlib.client import OAuth
import subprocess

app = Flask(__name__)
app.secret_key = '68ac36638398af85e7ea06ed024ab074'
oauth = OAuth(app)

google = oauth.remote_app(
    'google',
    consumer_key='63589803995-1fkussnubluk0e465g29ttbdc83rob4q.apps.googleusercontent.com',
    consumer_secret='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',
    request_token_params={'scope': 'email'},
    base_url='https://www.googleapis.com/oauth2/v1/',
    authorize_url='https://accounts.google.com/o/oauth2/auth',
    request_token_url=None,
    access_token_method='POST',
    access_token_url='https://accounts.google.com/o/oauth2/token',
)

@app.route('/')
def index():
    google_token = session.get('google_token')
    user_email = None

    if google_token:
        user_info = google.get('userinfo')
        user_email = user_info.data['email']

    return render_template('login.html', google_token=google_token, user_email=user_email)

@app.route('/login')
def login():
    return google.authorize(callback=url_for('authorized', _external=True))


@app.route('/logout')
def logout():
    session.pop('google_token', None)
    return redirect(url_for('index'))

@app.route('/login/authorized')
def authorized():
    response = google.authorized_response()
    if response is None or response.get('access_token') is None:
        return 'Access denied: reason={} error={}'.format(
            request.args['error_reason'],
            request.args['error_description']
        )

    session['google_token'] = (response['access_token'], '')
    user_info = google.get('userinfo')

    # Store or use user information as needed
    user_email = user_info.data['email']

    # Additional code to run after successful login
    print(f"User logged in: {user_email}")

    # Run app.py using subprocess
    subprocess.run(["python", "app.py"])

    # return redirect(url_for('index'))
    
    return redirect(url_for('index'))

@google.tokengetter
def get_google_oauth_token():
    return session.get('google_token')

if __name__ == '__main__':
    app.run(debug=True)
